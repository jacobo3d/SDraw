// Generated by CoffeeScript 1.7.1
var body, candsearch, draw, drawpoints, i, imageheight, imagewidth, mousedown, path, pointx, pointy, randomTimeout, resize, setTemplate, svg, timeseed, _i;

body = d3.select("body");

svg = d3.select("svg");

window.browserWidth = function() {
  return window.innerWidth || document.body.clientWidth;
};

window.browserHeight = function() {
  return window.innerHeight || document.body.clientHeight;
};

resize = function() {
  window.drawWidth = browserWidth() * 0.69;
  window.drawHeight = browserHeight();
  svg.attr({
    width: drawWidth,
    height: drawHeight
  }).style({
    'background-color': "#ffffff"
  });
  $('#candidates').css('height', drawHeight / 2 - 30);
  return $('#suggestions').css('height', drawHeight / 2 - 30);
};

resize();

$(window).resize(resize);

window.template = svg.append("g");

candsearch = function() {
  var query;
  query = $('#searchtext').val();
  if (query.length > 0) {
    return bing_search(query, function(data) {
      return data.map(function(url, i) {
        return $("#cand" + i).attr('src', url);
      });
    });
  }
};

$('#searchbutton').on('click', candsearch);

$('#searchtext').on('keydown', function(e) {
  if (e.keyCode === 13) {
    return candsearch();
  }
});

imagewidth = 400;

imageheight = 400;

mousedown = false;

pointx = 0;

pointy = 0;

for (i = _i = 0; _i <= 10; i = ++_i) {
  d3.select("#cand" + i).on('mousedown', function() {
    var image;
    d3.event.preventDefault();
    image = d3.event.target.src;
    template.selectAll("*").remove();
    template.append('image').attr({
      'xlink:href': image,
      x: 0,
      y: 0,
      width: 400,
      height: 400,
      preserveAspectRatio: "meet"
    });
    mousedown = true;
    pointx = d3.event.clientX;
    return pointy = d3.event.clientY;
  });
  d3.select("#cand" + i).on('mousemove', function() {
    if (mousedown) {
      d3.event.preventDefault();
      return d3.select("image").attr({
        x: d3.event.clientX - pointx,
        y: d3.event.clientY - pointy
      });
    }
  });
  d3.select("#cand" + i).on('mouseup', function() {
    d3.event.preventDefault();
    return mousedown = false;
  });
}

window.line = d3.svg.line().interpolate('cardinal').x(function(d) {
  return d.x;
}).y(function(d) {
  return d.y;
});

window.drawline = function(x1, y1, x2, y2) {
  return template.append("polyline").attr({
    points: [[x1, y1], [x2, y2]],
    stroke: "#d0d0d0",
    fill: "none",
    "stroke-width": "4"
  });
};

pointx = 0;

pointy = 0;

mousedown = false;

timeseed = 0;

randomTimeout = null;

setTemplate = function(id, template) {
  d3.select("#" + id).on('click', function() {
    return template.draw();
  });
  d3.select("#" + id).on('mousedown', function() {
    mousedown = true;
    d3.event.preventDefault();
    if (randomTimeout) {
      clearTimeout(randomTimeout);
    }
    pointx = d3.event.clientX;
    pointy = d3.event.clientY;
    return srand(timeseed);
  });
  d3.select("#" + id).on('mousemove', function() {
    var j;
    if (mousedown) {
      d3.event.preventDefault();
      template.change(d3.event.clientX - pointx, d3.event.clientY - pointy);
      i = Math.floor((d3.event.clientX - pointx) / 10);
      j = Math.floor((d3.event.clientY - pointy) / 10);
      return srand(timeseed + i * 100 + j);
    }
  });
  return d3.select("#" + id).on('mouseup', function() {
    mousedown = false;
    return randomTimeout = setTimeout(function() {
      return timeseed = Number(new Date());
    }, 3000);
  });
};

setTemplate("template0", meshTemplate);

setTemplate("template1", parseTemplate);

setTemplate("template2", kareobanaTemplate);

setTemplate("template3", kareobanaTemplate3);

drawpoints = [];

path = svg.append('path');

draw = function() {
  return path.attr({
    d: line(drawpoints),
    stroke: 'blue',
    'stroke-width': 3,
    fill: "none"
  });
};

mousedown = false;

svg.on('mousedown', function() {
  d3.event.preventDefault();
  mousedown = true;
  path = svg.append('path');
  return drawpoints = [
    {
      x: d3.event.clientX,
      y: d3.event.clientY
    }
  ];
});

svg.on('mouseup', function() {
  d3.event.preventDefault();
  if (mousedown) {
    drawpoints.push({
      x: d3.event.clientX,
      y: d3.event.clientY
    });
    draw();
    return mousedown = false;
  }
});

svg.on('mousemove', function() {
  if (!mousedown) {
    return;
  }
  d3.event.preventDefault();
  drawpoints.push({
    x: d3.event.clientX,
    y: d3.event.clientY
  });
  return draw();
});
