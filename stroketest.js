// Generated by CoffeeScript 1.7.1
var canvas, canvasX, canvasY, context, dist, draw, drawcount, drawing, drawinterval, drawpoints, hypot, mousepos, points, v2, vdraw, verocity;

canvas = $('#canvas');

canvas.attr('width', '500px');

canvas.attr('height', '500px');

context = canvas[0].getContext('2d');

drawing = false;

points = [];

verocity = [];

v2 = [];

canvasX = canvas.offset()["left"];

canvasY = canvas.offset()["top"];

hypot = function(x, y) {
  return Math.sqrt(x * x + y * y);
};

dist = function(p1, p2) {
  return hypot(p1[0] - p2[0], p1[1] - p2[1]);
};

mousepos = function(e) {
  var x, y, _ref;
  return _ref = 'touchstart' === e.type || 'touchmove' === e.type ? [e.originalEvent.changedTouches[0].pageX, e.originalEvent.changedTouches[0].pageY] : [e.pageX, e.pageY], x = _ref[0], y = _ref[1], _ref;
};

drawinterval = null;

drawcount = 0;

drawpoints = [];

canvas.on('touchstart mousedown', function(e) {
  var x, y, _ref;
  e.preventDefault();
  _ref = mousepos(e), x = _ref[0], y = _ref[1];
  drawing = true;
  points = [[x - canvasX, y - canvasY, e.timeStamp]];
  verocity = [0.0];
  v2 = [0.0];
  drawcount = 1;
  return drawpoints = [[x - canvasX, y - canvasY]];
});

canvas.on('touchmove mousemove', function(e) {
  if (!drawing) {
    return;
  }
  e.preventDefault();
  return draw(e);
});

draw = function(e) {
  var cur, d, len, pre, v, x, y, _ref;
  _ref = mousepos(e), x = _ref[0], y = _ref[1];
  points.push([x - canvasX, y - canvasY, e.timeStamp]);
  len = points.length;
  cur = points[len - 1];
  pre = points[len - 2];
  d = dist(cur, pre);
  v = d * 100.0 / (cur[2] - pre[2]);
  $('#text').text(v);
  verocity.push(v);
  len = verocity.length;
  v2[len - 2] = verocity[len - 1] - verocity[len - 2];
  context.lineJoin = "round";
  context.lineCap = "round";
  context.strokeStyle = v2[len - 2] > 0 ? 'rgb(255, 255, 0)' : 'rgb(0, 0, 255)';
  context.lineWidth = 10;
  context.beginPath();
  context.moveTo(pre[0], pre[1]);
  context.lineTo(cur[0], cur[1]);
  context.stroke();
  return context.closePath();
};

canvas.on('touchend mouseup', function(e) {
  var stroke, strokes, _i, _len, _results;
  e.preventDefault();
  draw(e);
  drawing = false;
  strokes = splitstroke(points);
  _results = [];
  for (_i = 0, _len = strokes.length; _i < _len; _i++) {
    stroke = strokes[_i];
    context.fillStyle = "rgb(255,255,255)";
    context.fillRect(stroke[0][0] - 7, stroke[0][1] - 7, 14, 14);
    _results.push(context.fillRect(stroke[1][0] - 7, stroke[1][1] - 7, 14, 14));
  }
  return _results;
});

vdraw = function() {
  var d, i, p0, p1, plen, v, _i, _j, _ref, _ref1;
  drawcount += 1;
  plen = points.length;
  if (points.length < 2) {
    return;
  }
  vcontext.lineJoin = "round";
  vcontext.lineCap = "round";
  vcontext.strokeStyle = 'rgv(0, 0, 0)';
  vcontext.lineWidth = 2;
  v = [0];
  for (i = _i = 0, _ref = drawcount - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    p0 = ipoint(i * 100);
    p1 = ipoint((i + 1) * 100);
    d = dist(p0, p1);
    v.push(d);
  }
  vcontext.fillStyle = '#fff';
  vcontext.fillRect(0, 0, 1000, 300);
  vcontext.beginPath();
  for (i = _j = 0, _ref1 = v.length - 2; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
    vcontext.moveTo(i * 10, 200 - v[i]);
    vcontext.lineTo((i + 1) * 10, 200 - v[i + 1]);
    vcontext.stroke();
  }
  return vcontext.closePath();
};
